####################################################################
Brian's Proxy Web Server

Everything passes the autograder 100%, so I started adding other features.

The server uses IO multiplexing to respond to keyboard input with info on
the cache.

The cache uses the LinkedList API I coded for UW's CSE 333, with some
additional code I put in to implement a least-recently-used (LRU) 
algorithm in the linked list - LLIteratorMoveToHead moves the current
node pointed to by the iterator to the head of the list.


The Makefile
############

make          - create an optimized version

make coverage - create a coverage version that automatically executes
     	        following compilation, and after some manual user action
		automatically runs lcov and genhtml to put coverage info
		in readable form in ./build/cov_html
		
make tests    - runs tests automatically

make clean    - deletes compilied libraries/binaries and coverage info.


Other Files
###########

./tests/free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

./driver.sh
    The autograder for Basic, Concurrency, and Cache.
    usage: ./driver.sh

./tests/nop-server.py
     helper for the autograder.         

./tiny
    Tiny Web server from the CS:APP text - used by the driver 

