####################
TODO:
###################

Short term:

in order:
      - fix error handling
      - split main to another file
      - write unit testing

random fixes:
       - have LRU algo work with hash table
       - fix dangling \r\n when saving 'type' in http
       - finish making fully HTTP 1.0 compliant
       - check signed/unsigned conversion, especially overflows
       - add fine grain locking - per bucket locks, also implement reader writer lock paradigm in hash table lib  
 *  - modify code a bit to be able to run AFL 

Long term:
     - add zlog logging library
     - add bstring library
     - add com_err error handling library
     - split the process up, use RPC to communicate (like OK web server)
     
####################################################################
Brian's Proxy Web Server

This project contains a caching, posix-multithreaded HTTP 1.0 proxy web server.
The server uses IO multiplexing to respond to keyboard input with info on
the cache.

The cache uses a doubly linked list for LRU replacement when it fills up,
and uses a chaining hash table in which the keys are a hash of the host/filename,
and the values are pointers to a struct containing metadata about the file.

To try it out, use 'make' and './bin/proxy 8080' and change settings in Mozilla
Firefox to use a manual proxy on port 8080.

Current limitations:
	-no HTTPS
	-no PUT or HEAD, only GET

Current command line commands (for while the proxy is running in the foreground): 
	p - print out metadata of current objects in cache

	<all other chars> - tells proxy to exit gracefully

The cache uses a LinkedList and HashTable API that I coded from an assignment
in UW's CSE 333.


###########
Other Files
###########

./tiny
    Tiny Web server from the CS:APP text - used by the driver grader
    
./tests/free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

./driver.sh
    The autograder for Basic, Concurrency, and Cache.
    usage: ./driver.sh

./tests/nop-server.py
     helper for the autograder.         

############
The Makefile
############

make          - create an optimized version

make coverage - create a coverage version that automatically executes
     	        following compilation, and after some manual user action
		automatically runs lcov and genhtml to put coverage info
		in readable form in ./build/cov_html
		
make tests    - runs tests automatically

make clean    - deletes compilied libraries/binaries and coverage info.




