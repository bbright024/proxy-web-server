==8289== Memcheck, a memory error detector
==8289== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8289== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==8289== Command: ./tests/LinkedList_tests 2
==8289== 
==8289== Invalid free() / delete / delete[] / realloc()
==8289==    at 0x4C2ED5B: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8289==    by 0x10916E: main (LinkedList_tests.c:61)
==8289==  Address 0x52085b0 is 0 bytes inside a block of size 4 free'd
==8289==    at 0x4C2ED5B: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8289==    by 0x109162: main (LinkedList_tests.c:54)
==8289==  Block was alloc'd at
==8289==    at 0x4C2DB2F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8289==    by 0x109103: main (LinkedList_tests.c:36)
==8289== 
==8289== Invalid read of size 8
==8289==    at 0x109B67: LLIteratorGetPayload (LinkedList.c:286)
==8289==    by 0x1091A8: main (LinkedList_tests.c:68)
==8289==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==8289== 
==8289== 
==8289== Process terminating with default action of signal 11 (SIGSEGV)
==8289==  Access not within mapped region at address 0x0
==8289==    at 0x109B67: LLIteratorGetPayload (LinkedList.c:286)
==8289==    by 0x1091A8: main (LinkedList_tests.c:68)
==8289==  If you believe this happened as a result of a stack
==8289==  overflow in your program's main thread (unlikely but
==8289==  possible), you can try to increase the size of the
==8289==  main thread stack using the --main-stacksize= flag.
==8289==  The main thread stack size used in this run was 8388608.
==8289== 
==8289== HEAP SUMMARY:
==8289==     in use at exit: 22,408 bytes in 102 blocks
==8289==   total heap usage: 103 allocs, 2 frees, 22,412 bytes allocated
==8289== 
==8289== LEAK SUMMARY:
==8289==    definitely lost: 396 bytes in 99 blocks
==8289==    indirectly lost: 0 bytes in 0 blocks
==8289==      possibly lost: 0 bytes in 0 blocks
==8289==    still reachable: 22,012 bytes in 3 blocks
==8289==         suppressed: 0 bytes in 0 blocks
==8289== Rerun with --leak-check=full to see details of leaked memory
==8289== 
==8289== For counts of detected and suppressed errors, rerun with: -v
==8289== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
